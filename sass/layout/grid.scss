/*
	Flexbox grid
	Fully Responsive
	Based on understandable breakpoint variables
	Doesn't use columns, but proportions
	Fully fluid with fixed-width gutters
	Fully nestable
	Will fall back to floating for IE9 and below
	Will not work in IE7 and below.
*/

/* Grid basis */

.g {
	padding: 0; list-style: none;
	margin-left: -$grid-gutter;

	

	/* You can turn off flexbox by setting $flexbox-grid: 0; in the variables; */ 
	@if $flexbox-grid == true {
		display: flex;
		flex-wrap: wrap;
		flex-direction: row;
	}

	/* Clearfix for older browsers without flexbox */
	&:before, &:after {
		content: " ";
		visibility: hidden;
		display: block;
		height: 0;
		clear: both;
	}

	/* Reset grid to floating */
	&-float {
		display: block;
	}
	
	/* Make children of grid items equal height */
	&-equal-height {
		
		> * {
			display: flex;

			> * {
				flex: 1;
			}
		}
	}
	/* 	
		DO NOT USE; Use g-float.
		Legacy class for reset grid to floating
		TODO: Remove in new major version
	*/
	&.grid-float {
		display: block;
	}

	/* Grid wrapping */
	&.wrap 		{ 	flex-wrap: wrap;   }
	&.nowrap 	{ 	flex-wrap: nowrap; }

	/*	Grid items
		Every direct child within .g is a grid item
		Used to be .gi, the new method is less susceptible to errors
		Every grid item has the standard gutter spacing from $grid-gutter
	*/

	> * {
		/* Floating as fallback for older browsers */
		float: left;
		padding-left: $grid-gutter;

		&.as-flex-start { align-self: flex-start; 	}
		&.as-flex-end 	{ align-self: flex-end; 	}
		&.as-stretch 	{ align-self: stretch; 		}
		&.as-center 	{ align-self: center; 		}
		&.as-baseline 	{ align-self: baseline; 	}
		&.as-initial 	{ align-self: initial; 		}
		&.as-inherit 	{ align-self: inherit; 		}
		
	}

	/* Gutters */
	&.gutter-none { 
		margin-left: 0;

		> * {
			padding-left: 0;
		}
	}

	/* Smaller gutter */
	&.gutter-small {
		margin-left: -$grid-gutter / 2;

		> * {
			padding-left: $grid-gutter / 2;
		}
	}

	/* Larger gutter */
	&.gutter-large {
		margin-left: -$grid-gutter * 2;

		> * {
			padding-left: $grid-gutter * 2;
		}
	}

	/* Let grid items decide their size on their own without setting a width  */
	&.auto {

		> * {
			flex: 1 0 auto;
		}
	}


}

/* 	Grid widths 
	12 column grid for $b0
*/

@for $i from 1 through 12 {
	$width: ($i/12) * 100%;

	@if $i < 10 {
		.b0_0#{ $i } { width: $width; }

		.b0_push_0#{ $i } { margin-left: $width; }
	} @else {

		.b0_#{ $i } { width: $width; }

		.b0_push_#{ $i } { margin-left: $width; }

	}
}
@for $i from 13 through 24 {
	$width: ($i/12) * 100%;
}

.b0_push_none { margin-left: 0; }

/* 12 column grid for $b1 and $b2 */
@for $b from 1 through 2 {
	$breakpoint : map-get($breakpoint-map, $b);
	$gutter		: map-get($gutter-map, $b);
	
	@media only screen and (min-width: $breakpoint) {
	
		@for $i from 1 through 12 {
			$width: ($i/12) * 100%;

			@if $i < 10 {
				.b#{$b}_0#{ $i } { width: $width; }

				.b#{$b}_push_0#{ $i } { margin-left: $width; }
			} @else {

				.b#{$b}_#{ $i } { width: $width; }

				.b#{$b}_push_#{ $i } { margin-left: $width; }
			}
			@for $i from 13 through 24 {
				$width: ($i/12) * 100%;
			}
		}

		.g {
			margin-left: -#{$gutter};
			
			> * {
				padding-left: $gutter;
			}
		}

		.b#{$b}_push_none { margin-left: 0; }

		/* No Gutter */
		&.gutter-b#{$b}-none { 
			margin-left: 0;

			> * {
				padding-left: 0;
			}
		}

		/* Smaller gutter */
		&.gutter-b#{$b}-small {
			margin-left: -$grid-gutter / 2;

			> * {
				padding-left: $grid-gutter / 2;
			}
		}

		/* Larger gutter */
		&.gutter-b#{$b}-large {
			margin-left: -$grid-gutter * 2;

			> * {
				padding-left: $grid-gutter * 2;
			}
		}

		/* Normal gutter */
		&.gutter-b#{$b}-normal {
			margin-left: -$grid-gutter;

			> * {
				padding-left: $grid-gutter;
			}
		}
	}
}

/* 24 column grid for $b3 and higher */
@for $b from 3 through $amount-breakpoints {
	$breakpoint : map-get($breakpoint-map, $b);
	$gutter		: map-get($gutter-map, $b);

	@media only screen and (min-width: $breakpoint) {

		@for $i from 1 through 24 {
			$width: ($i/24) * 100%;

			@if $i < 10 {

				.b#{$b}_0#{ $i } { width: $width; }

				.b#{$b}_push_0#{ $i } { margin-left: $width; }
				
			} @else {

				.b#{$b}_#{ $i } { width: $width; }

				.b#{$b}_push_#{ $i } { margin-left: $width; }
			}

			@for $i from 13 through 48 {
				$width: ($i/24) * 100%;
			}
		}

		.g {
			margin-left: -#{$gutter};
			
			> * {
				padding-left: $gutter;

			}
		}

		.b#{$b}_x5 { width: 20%; }
		.b#{$b}_x7 { width: 14.28571428571429%; }

		.b#{$b}_push_none { margin-left: 0; }

		/* No gutter */
		&.gutter-b#{$b}-none { 
			margin-left: 0;

			> * {
				padding-left: 0;
			}
		}

		/* Smaller gutter */
		&.gutter-b#{$b}-small {
			margin-left: -$grid-gutter / 2;

			> * {
				padding-left: $grid-gutter / 2;
			}
		}

		/* Larger gutter */
		&.gutter-b#{$b}-large {
			margin-left: -$grid-gutter * 2;

			> * {
				padding-left: $grid-gutter * 2;
			}
		}
		
		/* Normal gutter */
		&.gutter-b#{$b}-normal {
			margin-left: -$grid-gutter;

			> * {
				padding-left: $grid-gutter;
			}
		}

	}
	
}